openapi: '3.0.2'
info:
  title: Inventory API
  version: '1.0'
servers:
  - url: https://api.server.test/v1
paths:
  /vendors:
    get:
      tags: 
        - Vendor
      summary: Get all Vendors
      description: Get all Vendors
      operationId: GetVendors
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vendor"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /vendor:
    post:
      tags:
        - Vendor
      summary: Create Vendor Record
      description: Create Vendor Record
      operationId: CreateVendor
      requestBody:
        required: true
        content:
          application/json:            
            schema:
              $ref: "#/components/schemas/CreateVendorRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vendor"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /vendor/{vendor_id}:
    get:
      tags:
        - Vendor
      summary: Get Vendor Record
      description: Get Vendor Record
      operationId: GetVendor
      parameters:
        - $ref: "#/components/parameters/VendorID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vendor"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - Vendor
      summary: Update Vendor Record
      description: Update Vendor Record
      operationId: UpdateVendor
      parameters: 
        - $ref: "#/components/parameters/VendorID"
      requestBody:
        required: true
        content:
          application/json:            
            schema:
              $ref: "#/components/schemas/Vendor"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vendor"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Vendor
      summary: Delete a Vendor Record
      description: Delete a Vendor Record
      operationId: DeleteVendor
      parameters: 
        - $ref: "#/components/parameters/VendorID"
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  # 
  # Product
  #
  /vendor/{vendor_id}/products:
    get:
      tags: 
        - Product
      summary: Get all Products for a Vendor
      description: Get all Products for a Vendor
      operationId: GetProducts
      parameters: 
        - $ref: "#/components/parameters/VendorID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /vendor/{vendor_id}/product:
    post:
      tags:
        - Product
      summary: Create Product Record for Vendor
      description: Create Product Record for Vendor
      operationId: CreateProduct
      parameters: 
        - $ref: "#/components/parameters/VendorID"
      requestBody:
        required: true
        content:
          application/json:            
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /vendor/{vendor_id}/product/{product_id}:
    get:
      tags:
        - Product
      summary: Get Product Record for Vendor
      description: Get Product Record for Vendor
      operationId: GetProduct
      parameters:
        - $ref: "#/components/parameters/VendorID"
        - $ref: "#/components/parameters/ProductID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - Product
      summary: Update Product Record for Vendor
      description: Update Product Record for Vendor
      operationId: UpdateProduct
      parameters: 
        - $ref: "#/components/parameters/VendorID"
        - $ref: "#/components/parameters/ProductID"
      requestBody:
        required: true
        content:
          application/json:            
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Product
      summary: Delete a Product Record for Vendor
      description: Delete a Product Record for Vendor
      operationId: DeleteProduct
      parameters: 
        - $ref: "#/components/parameters/VendorID"
        - $ref: "#/components/parameters/ProductID"
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  ###
  ### Inventory
  ###
  /vendor/{vendor_id}/product/{product_id}/inventory:
    get:
      tags: 
        - Inventory
      summary: Get Recent InventorySnapshots for Product
      description: Get Recent InventorySnapshots for Product
      operationId: GetInventorySnapshots
      parameters: 
        - $ref: "#/components/parameters/VendorID"
        - $ref: "#/components/parameters/ProductID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventorySnapshot"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Inventory
      summary: Create and InventorySnapshot Record for Product
      description: Create and InventorySnapshot Record for Product
      operationId: CreateInventorySnapshot
      parameters: 
        - $ref: "#/components/parameters/VendorID"
        - $ref: "#/components/parameters/ProductID"
      requestBody:
        required: true
        content:
          application/json:            
            schema:
              $ref: "#/components/schemas/InventorySnapshot"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventorySnapshot"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  schemas:
    # Objects
    Vendor:
      description: "Syrup Vendor"
      type: object
      properties:
        id:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey;unique;type:uuid;default:uuid_generate_v4();"
        name:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "not null"
        scrape_type:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "not null"
        products: 
          type: array
          items: 
            $ref: "#/components/schemas/Product"
    CreateVendorRequest:
      description: "Create Syrup Vendor"
      type: object
      properties:
        name:
          type: string
        scrape_type:
          type: string
    Product:
      description: "Syrup"
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        stock_level:
          type: integer
        inventory_snapshots: 
          type: array
          items: 
            $ref: "#/components/schemas/InventorySnapshot"
        vendor_id:
          type: string
    MutateProductRequest:
      description: "Syrup"
      type: object
      properties:
        name:
          type: string
        stock_level:
          type: integer
    InventorySnapshot:
      description: "Point-in-Time Inventory Data"
      type: object
      properties:
        id:
          type: string
        stock_level:
          type: integer
        product_id:
          type: string
        created_at:
          type: string
    # Errors
    HTTPError:
      type: object
      properties:
        message:
          type: string
  parameters:
    VendorID:
      name: vendor_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ProductID:
      name: product_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
  responses:
    HTTPError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    TooManyRequestsError:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
